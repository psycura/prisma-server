# import CommentWhereInput,User,UserCreaterolesInput,ReporterProfileCreateOneWithoutUserInput,ManagerProfileCreateOneWithoutUserInput,ManagerProfileWhereUniqueInput,ReporterProfileWhereUniqueInput,ReporterProfileUpdateInput,ManagerProfileWhereUniqueInput,ManagerProfileUpdateInput,ReporterProfileCreateInput,ManagerProfileCreateInput,ReporterProfileWhereInput,Node,ManagerProfileWhereInput,ReporterProfileWhereUniqueInput,ManagerProfileWhereUniqueInput,ReporterProfileOrderByInput,ReporterProfileWhereInput,ManagerProfileWhereInput,ManagerProfileOrderByInput,ManagerProfile,ReporterProfile, CommentCreateInput,CommentWhereUniqueInput,CommentOrderByInput,CommentWhereInput,Comment,BatchPayload,QuizWhereInput,UserUpdateInput,UserWhereUniqueInput,Report,ReportWhereInput,ReportOrderByInput,UserOrderByInput,Quiz,QuizOrderByInput,DecisionWhereInput,DecisionOrderByInput,NotificationSettingsOrderByInput,NotificationSettingsWhereInput,UserWhereInput,NotificationSettings, CommentOrderByInput,Comment,Decision,   from "../../generated/prisma.graphql"

type Query {
    users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
    user(where: UserWhereUniqueInput!): User
    comment(where: CommentWhereUniqueInput!): Comment
    comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
    commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!

    usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
    managerProfiles(where: ManagerProfileWhereInput, orderBy: ManagerProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ManagerProfile]!
    reporterProfiles(where: ReporterProfileWhereInput, orderBy: ReporterProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReporterProfile]!
    managerProfile(where: ManagerProfileWhereUniqueInput!): ManagerProfile
    reporterProfile(where: ReporterProfileWhereUniqueInput!): ReporterProfile
    managerProfilesConnection(where: ManagerProfileWhereInput, orderBy: ManagerProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ManagerProfileConnection!
    reporterProfilesConnection(where: ReporterProfileWhereInput, orderBy: ReporterProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReporterProfileConnection!

}

type Mutation {
    createComment(data: CommentCreateInput!): Comment!
    deleteComment(where: CommentWhereUniqueInput!): Comment

    createManager(data: ManagerCreatePayload!): User!
    updateManager(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
    deleteUser(where: UserWhereUniqueInput!): User
    updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
    deleteManyUsers(where: UserWhereInput): BatchPayload!

    updateManagerProfile(data: ManagerProfileUpdateInput!, where: ManagerProfileWhereUniqueInput!): ManagerProfile
    updateReporterProfile(data: ReporterProfileUpdateInput!, where: ReporterProfileWhereUniqueInput!): ReporterProfile
    deleteManagerProfile(where: ManagerProfileWhereUniqueInput!): ManagerProfile
    deleteReporterProfile(where: ReporterProfileWhereUniqueInput!): ReporterProfile
    deleteManyManagerProfiles(where: ManagerProfileWhereInput): BatchPayload!
    deleteManyReporterProfiles(where: ReporterProfileWhereInput): BatchPayload!
}

input ManagerCreatePayload {
    additionalPhone: String
    address: String!
    userName:String
    email: String!
    firstName: String!
    password:String!
    lastName: String!
    message: String
    phone: String!
    roles: UserCreaterolesInput
    managerProfile: ManagerProfileCreateOneWithoutUserInput
    reporterProfile: ReporterProfileCreateOneWithoutUserInput
}


