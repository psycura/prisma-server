# import QuestionWhereInput,QuizCreateInput,BatchPayload,QuestionUpdateInput,QuizUpdateInput,QuestionCreateInput,QuestionWhereUniqueInput,QuizWhereUniqueInput,QuestionOrderByInput,Question,Quiz,QuizWhereInput, QuizOrderByInput from "../../generated/prisma.graphql"

type Query {
    questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
    quizzes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz]!
    question(where: QuestionWhereUniqueInput!): Question
    quiz(where: QuizWhereUniqueInput!): Quiz
    questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
    quizzesConnection(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuizConnection!
}

type Mutation {
    createQuiz(data: QuizCreateInput!): Quiz!
    createQuestion(data: QuestionCreateInput!): Question!
    updateQuiz(data: QuizUpdateInput!, where: QuizWhereUniqueInput!): Quiz
    updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
    deleteQuestion(where: QuestionWhereUniqueInput!): Question
    deleteQuiz(where: QuizWhereUniqueInput!): Quiz
    upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
    upsertQuiz(where: QuizWhereUniqueInput!, create: QuizCreateInput!, update: QuizUpdateInput!): Quiz!
    updateManyQuestions(data: QuestionUpdateInput!, where: QuestionWhereInput): BatchPayload!
    updateManyQuizzes(data: QuizUpdateInput!, where: QuizWhereInput): BatchPayload!
    deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
    deleteManyQuizzes(where: QuizWhereInput): BatchPayload!
}
